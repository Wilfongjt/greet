# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: greet-gateway # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'
  profile: ${self:custom.profiles.${self:provider.stage}}
  #profile: ${self:provider.stage}Profile
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1
  environment:
    SERVICE_NAME: ${self:service}
    #STAGE_NAME: ${self:provider.stage}
    # TABLE_NAME: documents_${self:provider.stage}



# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    description: "Greet hello."
    events:
      - http:
          method: get
          path: hello
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
plugins:
  - serverless-domain-manager

custom:
    #defaultStage: dev
    # use input stage otherwise use provider.stage
    stage: ${opt:stage, 'dev'}

    profiles:
      dev: devProfile
      prod: prodProfile
      test: testProfile

    domains:
      dev: dev-api.lyttlebit.com
      prod: api.lyttlebit.com
      test: test-api.lyttlebit.com

    customDomain:
      basePath: 'greet' # This will be prefixed to all routes
      endpointType: 'edge'
      # stage: ${self:provider.stage}
      # lookup domain based on stage
      domainName: "${self:custom.domains.${self:custom.stage}}" # Change this to your domain.
      certificateName: "${self:custom.domains.${self:custom.stage}}"
      createRoute53Record: true
